// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfers.sql

package database

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers(from_account_id, to_account_id, from_entry_id, to_entry_id, amount)
VALUES($1,$2,$3,$4,$5) RETURNING id, created_at, updated_at, from_account_id, to_account_id, amount, from_entry_id, to_entry_id
`

type CreateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	FromEntryID   int64 `json:"from_entry_id"`
	ToEntryID     int64 `json:"to_entry_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.FromEntryID,
		arg.ToEntryID,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.FromEntryID,
		&i.ToEntryID,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM transfers WHERE id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, transferID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, transferID)
	return err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, created_at, updated_at, from_account_id, to_account_id, amount, from_entry_id, to_entry_id FROM transfers WHERE id = $1
`

func (q *Queries) GetTransfer(ctx context.Context, transferID int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, transferID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.FromEntryID,
		&i.ToEntryID,
	)
	return i, err
}

const getTransferForUpdate = `-- name: GetTransferForUpdate :one
SELECT id, created_at, updated_at, from_account_id, to_account_id, amount, from_entry_id, to_entry_id FROM transfers WHERE id = $1 FOR NO KEY UPDATE
`

func (q *Queries) GetTransferForUpdate(ctx context.Context, transferID int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferForUpdate, transferID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.FromEntryID,
		&i.ToEntryID,
	)
	return i, err
}

const updateTransferAmount = `-- name: UpdateTransferAmount :one
UPDATE transfers SET amount = $1, updated_at = NOW() WHERE id = $2 RETURNING id, created_at, updated_at, from_account_id, to_account_id, amount, from_entry_id, to_entry_id
`

type UpdateTransferAmountParams struct {
	TransferAmount int64 `json:"transfer_amount"`
	TransferID     int64 `json:"transfer_id"`
}

func (q *Queries) UpdateTransferAmount(ctx context.Context, arg UpdateTransferAmountParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransferAmount, arg.TransferAmount, arg.TransferID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.FromEntryID,
		&i.ToEntryID,
	)
	return i, err
}
